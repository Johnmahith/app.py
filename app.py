# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16US9zjUV5LtLuEQm0TgXuSEONGk2FUA6
"""

# Import the necessary libraries
import streamlit as st
import pandas as pd
import joblib

# Load the trained model and scaler
model = joblib.load('attrition_model.pkl')
scaler = joblib.load('scaler.pkl')

# Page configuration
st.set_page_config(
    page_title="Employee Attrition Prediction",
    page_icon="üßë‚Äçüíº",
    layout="centered",  # Can be "wide" or "centered"
    initial_sidebar_state="collapsed",  # Collapsed sidebar by default
)

# Main page title
st.markdown("<h1 style='text-align: center; color: #2E86C1;'>Employee Attrition Risk Predictor</h1>", unsafe_allow_html=True)

# Instruction text
st.markdown("""
    <div style='text-align: center;'>
        Use the inputs below to predict the likelihood of employee attrition.
    </div>
""", unsafe_allow_html=True)

# Create input fields in columns for more structure
col1, col2 = st.columns(2)

with col1:
    age = st.number_input("Age", min_value=20, max_value=60, value=30)
    distance_from_home = st.number_input("Distance from Home (miles)", min_value=1, max_value=30, value=5)

with col2:
    years_at_company = st.number_input("Years at Company", min_value=1, max_value=20, value=5)
    job_satisfaction = st.selectbox("Job Satisfaction", options=[1, 2, 3, 4])

# Prepare the input data
input_data = pd.DataFrame({
    'Age': [age],
    'DistanceFromHome': [distance_from_home],
    'YearsAtCompany': [years_at_company],
    'JobSatisfaction': [job_satisfaction]
})

# Scale the input data
input_data_scaled = scaler.transform(input_data)

# Add some spacing before the button
st.markdown("<br>", unsafe_allow_html=True)

# Prediction button and result display
if st.button("Predict Attrition Risk", key="predict_button"):
    prediction = model.predict(input_data_scaled)
    risk = "High Risk of Attrition" if prediction[0] == 1 else "Low Risk of Attrition"

    # Style the prediction result
    st.markdown(f"""
        <div style='text-align: center;'>
            <h3 style='color: {"#C0392B" if risk == "High Risk of Attrition" else "#27AE60"};'>Prediction: {risk}</h3>
        </div>
    """, unsafe_allow_html=True)

# Footer information
st.markdown("<hr>", unsafe_allow_html=True)
st.markdown("""
    <div style='text-align: center;'>
        <small>Developed by John Mahith | Data Science Capstone Project</small>
    </div>
""", unsafe_allow_html=True)

# Specify your required packages in a requirements file
requirements = """
streamlit
scikit-learn
pandas
joblib
"""

# Write the requirements to a text file
with open("requirements.txt", "w") as f:
    f.write(requirements.strip())

# Specify your required packages
requirements = """
streamlit
scikit-learn
pandas
joblib
"""

# Write the requirements to a text file
with open("requirements.txt", "w") as f:
    f.write(requirements.strip())

